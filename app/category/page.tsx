'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button, Input, Modal, Select, message } from 'antd';
import { EditOutlined, DeleteOutlined, PlusOutlined } from '@ant-design/icons';

interface Category {
  id: number;
  type: '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö' | '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢';
  icon: string;
  name: string;
}

export default function CategoryManagementPage() {
  const router = useRouter();

  const [categories, setCategories] = useState<Category[]>([
    { id: 1, type: '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö', icon: 'üí∞', name: '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô' },
    { id: 2, type: '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢', icon: 'üçû', name: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£' },
    { id: 3, type: '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢', icon: 'üöó', name: '‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á' },
    { id: 4, type: '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢', icon: 'üß¥', name: '‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß' },
    { id: 5, type: '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢', icon: 'üì¶', name: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ' },
  ]);

  const [newCategory, setNewCategory] = useState<Omit<Category, 'id'>>({
    name: '',
    icon: '',
    type: '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢',
  });
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editId, setEditId] = useState<number | null>(null);

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Modal ‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏á‡∏¥‡∏ô
  const [moneyModalOpen, setMoneyModalOpen] = useState(false);
  const [selectedType, setSelectedType] = useState<'‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö' | '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢' | null>(null);
  const [moneyAmount, setMoneyAmount] = useState('');

  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏∂‡∏á‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡πÅ‡∏Ñ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡∏î‡∏π‡∏ú‡∏•)
  const [moneyAllocated, setMoneyAllocated] = useState<{ type: '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö' | '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢'; amount: number }[]>([]);

  const showModal = () => setIsModalOpen(true);

  const handleCancel = () => {
    setNewCategory({ name: '', icon: '', type: '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢' });
    setEditId(null);
    setIsModalOpen(false);
  };

  const handleSave = () => {
    if (!newCategory.name || !newCategory.icon) {
      message.warning('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô');
      return;
    }
    if (editId !== null) {
      setCategories((prev) =>
        prev.map((cat) =>
          cat.id === editId ? { ...cat, ...newCategory } : cat
        )
      );
      message.success('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } else {
      setCategories((prev) => [
        ...prev,
        { id: Date.now(), ...newCategory },
      ]);
      message.success('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
    handleCancel();
  };

  const handleDelete = (id: number) => {
    Modal.confirm({
      title: '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ?',
      onOk: () => {
        setCategories((prev) => prev.filter((cat) => cat.id !== id));
        message.success('‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
      },
    });
  };

  const handleEdit = (category: Category) => {
    setNewCategory({ name: category.name, icon: category.icon, type: category.type });
    setEditId(category.id);
    setIsModalOpen(true);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÉ‡∏™‡πà‡πÄ‡∏á‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡πá‡∏ï‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
  const openMoneyModal = (type: '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö' | '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢') => {
    setSelectedType(type);
    setMoneyAmount('');
    setMoneyModalOpen(true);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà
  const saveMoneyAmount = () => {
    const parsed = parseFloat(moneyAmount);
    if (isNaN(parsed) || parsed <= 0) {
      message.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }
    if (selectedType) {
      setMoneyAllocated((prev) => [...prev, { type: selectedType, amount: parsed }]);
      message.success(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ${parsed} ‡∏ö‡∏≤‡∏ó ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ${selectedType} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
    }
    setMoneyModalOpen(false);
  };

  return (
    <div className="min-h-screen bg-blue-200 py-10 px-4 flex flex-col items-center">
      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô */}
      <div className="w-full max-w-xl flex justify-between bg-white px-6 py-3 shadow-sm rounded-b-md mb-4">
        <button
          onClick={() => router.push('/transactions')}
          className="text-blue-700 font-semibold hover:underline"
        >
          ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        </button>
        <button
          onClick={() => router.push('/summary')}
          className="text-blue-700 font-semibold hover:underline"
        >
          ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        </button>
      </div>

      <div className="max-w-xl w-full bg-white p-6 rounded-lg shadow">
        <h2 className="text-2xl font-bold text-center text-purple-700 mb-6">‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</h2>

        {/* ‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô */}
        <div className="flex justify-center gap-6 mb-6">
          <div
            onClick={() => openMoneyModal('‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö')}
            className="cursor-pointer border-2 border-green-600 rounded-md px-8 py-6 flex flex-col items-center justify-center text-green-700 font-semibold hover:bg-green-100 transition"
          >
            ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö
          </div>
          <div
            onClick={() => openMoneyModal('‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢')}
            className="cursor-pointer border-2 border-red-600 rounded-md px-8 py-6 flex flex-col items-center justify-center text-red-700 font-semibold hover:bg-red-100 transition"
          >
            ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
          </div>
        </div>

        {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà */}
        <div className="flex justify-between text-lg font-semibold mb-4 px-2">
          <span className="text-green-600">‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö</span>
          <span className="text-red-500 underline">‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</span>
        </div>
        <ul className="space-y-3">
          {categories.map((cat) => (
            <li key={cat.id} className="flex justify-between items-center px-2">
              <span>{cat.icon} {cat.name}</span>
              <div className="space-x-2">
                <Button icon={<EditOutlined />} size="small" onClick={() => handleEdit(cat)} />
                <Button icon={<DeleteOutlined />} size="small" danger onClick={() => handleDelete(cat.id)} />
              </div>
            </li>
          ))}
        </ul>
        <Button
          className="mt-6 w-full bg-purple-700 text-white hover:bg-purple-800"
          icon={<PlusOutlined />}
          onClick={showModal}
        >
          ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        </Button>
      </div>

      {/* Modal ‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô */}
      <Modal
        title={`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ${selectedType}`}
        open={moneyModalOpen}
        onCancel={() => setMoneyModalOpen(false)}
        onOk={saveMoneyAmount}
        okText="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"
        cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
      >
        <Input
          placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"
          value={moneyAmount}
          onChange={(e) => setMoneyAmount(e.target.value)}
          type="number"
          min={0}
          step="0.01"
          autoFocus
        />
      </Modal>

      {/* Modal ‡πÄ‡∏û‡∏¥‡πà‡∏° / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà */}
      <Modal
        title={editId !== null ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'}
        open={isModalOpen}
        onCancel={handleCancel}
        onOk={handleSave}
        okText="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"
        cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
      >
        <div className="space-y-4">
          <Select<'‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö' | '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢'>
            className="w-full"
            value={newCategory.type}
            onChange={(value) => setNewCategory((prev) => ({ ...prev, type: value }))}
            options={[
              { label: '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö', value: '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö' },
              { label: '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢', value: '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢' },
            ]}
          />
          <Input
            placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"
            value={newCategory.name}
            onChange={(e) => setNewCategory((prev) => ({ ...prev, name: e.target.value }))}
          />
          <Input
            placeholder="‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô (emoji ‡πÄ‡∏ä‡πà‡∏ô üçï)"
            value={newCategory.icon}
            onChange={(e) => setNewCategory((prev) => ({ ...prev, icon: e.target.value }))}
          />
        </div>
      </Modal>
    </div>
  );
}
